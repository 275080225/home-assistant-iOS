# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.7.0"
REQUIRED_XCODE_VERSION = "8.2"
default_platform :ios

platform :ios do
  commit = last_git_commit

  before_all do
    setup
  end

  private_lane :setup do
    ENV["DELIVER_USERNAME"] = ENV["HOMEASSISTANT_APPLE_ID"]
    ENV["MATCH_PASSWORD"] = ENV["HOMEASSISTANT_CERTIFICATE_KEY"]
    ENV["PILOT_APPLE_ID"] = ENV["HOMEASSISTANT_APPLE_ID"]
    ENV["SIGH_USERNAME"] = ENV["HOMEASSISTANT_APPLE_ID"]
    ENV["FASTLANE_PASSWORD"] = ENV["HOMEASSISTANT_ITUNES_PASSWORD"]
  end

  desc "Fetches the provisioning profiles so you can build locally and deploy to your device"
  lane :certs do
    # match(app_identifier: "io.robbie.HomeAssistant", type: "development", readonly: true)
    # match(app_identifier: "io.robbie.HomeAssistant.APNSAttachmentService", type: "development", readonly: true)
    # match(app_identifier: "io.robbie.HomeAssistant.NotificationContentExtension", type: "development", readonly: true)
    match(app_identifier: "io.robbie.HomeAssistant", type: "appstore", readonly: true)
    match(app_identifier: "io.robbie.HomeAssistant.APNSAttachmentService", type: "appstore", readonly: true)
    match(app_identifier: "io.robbie.HomeAssistant.NotificationContentExtension", type: "appstore", readonly: true)
  end

  def change_log_since_last_tag
    # http://git-scm.com/docs/pretty-formats
    # <short hash> <commit title>
    return changelog_from_git_commits(pretty: '- %s (%h)')
  end

  def version_string(version_number, build_number)
    "#{version_number} (#{build_number})"
  end

  def tag_name(build_type, version_number, build_number)
    "#{build_type}/#{version_number}/#{build_number}"
  end

  def complete_version_number
    return version_string(get_version_number, get_build_number)
  end

  desc "Runs all the unit tests"
  desc "Submits a new Beta Build to Fabric"
  desc "Submits a new Beta Build to Apple TestFlight"
  lane :ci do
    if is_ci && ENV['TRAVIS_PULL_REQUEST'] == "false"
      if git_branch == "master"
        itc
      elsif git_branch == "dev"
        fabric
      end
    end
  end

  desc "Bump build number"
  lane :bump do
    update_build_number
  end

  lane :release do
    cocoapods(repo_update: true)
    fabric_beta
    itunes
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :itc do
    cocoapods(repo_update: true)
    itunes
  end

  desc "Submit a new Beta Build to Fabric"
  desc "This will also make sure the profile is up to date"
  lane :fabric do
    cocoapods(repo_update: true)
    fabric_beta
  end

  private_lane :update_build_number do
    increment_version_number(version_number: get_version_number)
    increment_build_number

    # Needed so that the changelog doesn't include the version bump commit
    change_log = changelog_from_git_commits(pretty: '- %s (%h)')

    commit_version_bump(
      message: "Version bump to #{complete_version_number}",
      xcodeproj: "HomeAssistant.xcodeproj"
    )

    push_to_git_remote

    set_github_release(
      repository_name: "home-assistant/home-assistant-iOS",
      api_token: ENV["HOMEASSISTANT_GITHUB_API_TOKEN"],
      name: complete_version_number,
      tag_name: tag_name("testflight", get_version_number, get_build_number),
      description: change_log || "Release commit",
      is_prerelease: false
    )
  end

  desc "Submit a new Beta Build to Fabric"
  desc "This will also make sure the profile is up to date"
  private_lane :fabric_beta do |options|

    clean_build_artifacts
    clear_derived_data

    certs

    gym

    notification(
      subtitle: "Finished Building",
      message: "Uploading to Fabric",
      activate: "com.googlecode.iterm2",
      app_icon:"https://raw.githubusercontent.com/fastlane/fastlane/master/fastlane/assets/fastlane.png"
    )

    crashlytics(
      api_token: ENV['HOMEASSISTANT_FABRIC_CLIENT_ID'],
      build_secret: ENV['HOMEASSISTANT_FABRIC_SECRET'],
      notes: changelog_from_git_commits(pretty: '- %s'),
      groups: ["Home Assistant"]
    )

    notification(
      subtitle: "Finished",
      message: "Build #{complete_version_number} built and uploaded to Fabric",
      activate: "com.googlecode.iterm2",
      app_icon:"https://raw.githubusercontent.com/fastlane/fastlane/master/fastlane/assets/fastlane.png"
    )

    gitter(integration_id: ENV["HOMEASSISTANT_GITTER_INTEGRATION_ID"],
           message: "New build β v#{complete_version_number} uploaded to Fabric")

    rocket
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  private_lane :itunes do |options|

    clean_build_artifacts
    clear_derived_data

    certs

    gym

    notification(
      subtitle: "Finished Building",
      message: "Uploading to Testflight",
      activate: "com.googlecode.iterm2",
      app_icon:"https://raw.githubusercontent.com/fastlane/fastlane/master/fastlane/assets/fastlane.png"
    )

    pilot(
      changelog: changelog_from_git_commits(pretty: '- %s'),
      skip_submission: true,
      distribute_external: false
    )

    notification(
      subtitle: "Finished",
      message: "Build #{complete_version_number} built and uploaded to Testflight",
      activate: "com.googlecode.iterm2",
      app_icon:"https://raw.githubusercontent.com/fastlane/fastlane/master/fastlane/assets/fastlane.png"
    )

    gitter(integration_id: ENV["HOMEASSISTANT_GITTER_INTEGRATION_ID"],
           message: "New build β v#{complete_version_number} uploaded to Fabric")

    rocket
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful
    # Should really have Gitter hooks
  end

  error do |lane, exception|
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
