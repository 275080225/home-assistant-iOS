# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.102.0"
REQUIRED_XCODE_VERSION = "8.0"
default_platform :ios

platform :ios do
  before_all do
    # cocoapods
  end

  desc "Runs all the tests"
  lane :test do
    scan
  end

  desc "Installs FixCode which disables the \"Fix Issue\" button in Xcode"
  lane :xcode do
    install_xcode_plugin(
      url: "https://github.com/fastlane/FixCode/releases/download/0.2.0/FixCode.xcplugin.zip"
    )
  end

  desc "Fetches the provisioning profiles so you can build locally and deploy to your device"
  lane :certs do
    match(type: "development")
    match(type: "appstore")
  end

  desc "Creates a new push certificate, ready to be uploaded to SNS"
  lane :push do
    pem(generate_p12: true, save_private_key: true)
    puts "------------------ Please upload the .p12 file to SNS ------------------ ".yellow
  end

  def change_log_since_last_tag
    # http://git-scm.com/docs/pretty-formats
    # <short hash> <commit title>
    return changelog_from_git_commits(pretty: '%h %s')
  end

  def version_string(version_number, build_number)
    "#{version_number} (#{build_number})"
  end

  def tag_name(build_type, version_number, build_number)
    "#{build_type}/#{version_number}/#{build_number}"
  end

  def load_keys
    begin
      import("keys")
    rescue => exception
      UI.error("fastlane/keys file not found. To use this Fastfile, copy fastlane/keys.template into fastlane/keys and fill in the values")
      raise exception
    end
  end

  private_lane :verify_xcode_version do
    ensure_xcode_version(version: REQUIRED_XCODE_VERSION)
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do
    increment_build_number
    commit_version_bump
    match(type: "appstore")
    gym(scheme: "HomeAssistant", workspace: "HomeAssistant.xcworkspace", output_directory: "./build")
    pilot

    # sh "your_script.sh"
    # You can also use other beta testing services here (run `fastlane actions`)
  end

  lane :testflight do |options|
    load_keys

    ensure_git_branch(
      branch: "(master|release\\S+|hotfix\\S+)"
    )

    ensure_git_status_clean

    #verify_xcode_version

    version_number = options[:version_number] || get_version_number

    raise "Missing version number: use version_number parameter" unless version_number != nil

    increment_version_number(version_number: version_number)
    build_number = increment_build_number
    complete_version_number = version_string(version_number, build_number)

    commit_version_bump(
      message: "Version bump to #{complete_version_number}",
      xcodeproj: "HomeAssistant.xcodeproj"
    )

    change_log = change_log_since_last_tag

    clean_build_artifacts
    clear_derived_data

    match(readonly: true)
    gym(
      workspace: "HomeAssistant.xcworkspace",
      scheme: "HomeAssistant",
      configuration: "Release",
      clean: true,
      output_directory: "./build"
    )

    pilot(
      changelog: change_log,
      skip_submission: true,
      distribute_external: false
    )

    set_github_release(
      repository_name: "home-assistant/home-assistant-iOS",
      api_token: ENV["GITHUB_API_TOKEN"],
      name: complete_version_number,
      tag_name: tag_name("testflight", version_number, build_number),
      description: change_log_since_last_tag,
      is_prerelease: false
    )

    rocket
  end

  desc "Deploy a new version to the App Store"
  lane :appstore do
    increment_build_number
    commit_version_bump
    match(type: "appstore")
    # snapshot
    gym(scheme: "HomeAssistant", workspace: "HomeAssistant.xcworkspace", output_directory: "./build") # Build your app - more options available
    deliver(force: true)
    # frameit
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful
    # Should really have Gitter hooks
  end

  error do |lane, exception|
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
