# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.64.1"
REQUIRED_XCODE_VERSION = "9.1"
default_platform :ios

platform :ios do
  before_all do
    setup
  end

  private_lane :setup do
    ENV["DELIVER_USERNAME"] = ENV["HOMEASSISTANT_APPLE_ID"]
    ENV["FASTLANE_TEAM_ID"] = ENV["HOMEASSISTANT_TEAM_ID"]
    ENV["MATCH_GIT_URL"] = ENV["HOMEASSISTANT_CERTIFICATE_GIT"]
    ENV["MATCH_PASSWORD"] = ENV["HOMEASSISTANT_CERTIFICATE_KEY"]
    ENV["PILOT_APPLE_ID"] = ENV["HOMEASSISTANT_APPLE_ID"]
    ENV["SIGH_USERNAME"] = ENV["HOMEASSISTANT_APPLE_ID"]
    ENV["LOKALISE_API_TOKEN"] = ENV["HOMEASSISTANT_LOKALIZE_TOKEN"]
    ENV["LOKALISE_PROJECT_ID"] = ENV["HOMEASSISTANT_LOKALIZE_PROJECT_ID"]
  end

  desc "Fetches the provisioning profiles so you can build locally and deploy to your device"
  lane :certs do
    match(app_identifier: "io.robbie.HomeAssistant", type: "appstore", readonly: true, keychain_name: ENV["MATCH_KEYCHAIN_NAME"], keychain_password: ENV["MATCH_PASSWORD"])
    match(app_identifier: "io.robbie.HomeAssistant", type: "development", readonly: true, keychain_name: ENV["MATCH_KEYCHAIN_NAME"], keychain_password: ENV["MATCH_PASSWORD"])

    match(app_identifier: "io.robbie.HomeAssistant.APNSAttachmentService", type: "appstore", readonly: true, keychain_name: ENV["MATCH_KEYCHAIN_NAME"], keychain_password: ENV["MATCH_PASSWORD"])
    match(app_identifier: "io.robbie.HomeAssistant.APNSAttachmentService", type: "development", readonly: true, keychain_name: ENV["MATCH_KEYCHAIN_NAME"], keychain_password: ENV["MATCH_PASSWORD"])

    match(app_identifier: "io.robbie.HomeAssistant.NotificationContentExtension", type: "appstore", readonly: true, keychain_name: ENV["MATCH_KEYCHAIN_NAME"], keychain_password: ENV["MATCH_PASSWORD"])
    match(app_identifier: "io.robbie.HomeAssistant.NotificationContentExtension", type: "development", readonly: true, keychain_name: ENV["MATCH_KEYCHAIN_NAME"], keychain_password: ENV["MATCH_PASSWORD"])

    match(app_identifier: "io.robbie.HomeAssistant.MapNotificationContentExtension", type: "appstore", readonly: true, keychain_name: ENV["MATCH_KEYCHAIN_NAME"], keychain_password: ENV["MATCH_PASSWORD"])
    match(app_identifier: "io.robbie.HomeAssistant.MapNotificationContentExtension", type: "development", readonly: true, keychain_name: ENV["MATCH_KEYCHAIN_NAME"], keychain_password: ENV["MATCH_PASSWORD"])

    match(app_identifier: "io.robbie.HomeAssistant.dev", type: "appstore", readonly: true, keychain_name: ENV["MATCH_KEYCHAIN_NAME"], keychain_password: ENV["MATCH_PASSWORD"])
    match(app_identifier: "io.robbie.HomeAssistant.dev", type: "development", readonly: true, keychain_name: ENV["MATCH_KEYCHAIN_NAME"], keychain_password: ENV["MATCH_PASSWORD"])

    match(app_identifier: "io.robbie.HomeAssistant.dev.APNSAttachmentService", type: "appstore", readonly: true, keychain_name: ENV["MATCH_KEYCHAIN_NAME"], keychain_password: ENV["MATCH_PASSWORD"])
    match(app_identifier: "io.robbie.HomeAssistant.dev.APNSAttachmentService", type: "development", readonly: true, keychain_name: ENV["MATCH_KEYCHAIN_NAME"], keychain_password: ENV["MATCH_PASSWORD"])

    match(app_identifier: "io.robbie.HomeAssistant.dev.NotificationContentExtension", type: "appstore", readonly: true, keychain_name: ENV["MATCH_KEYCHAIN_NAME"], keychain_password: ENV["MATCH_PASSWORD"])
    match(app_identifier: "io.robbie.HomeAssistant.dev.NotificationContentExtension", type: "development", readonly: true, keychain_name: ENV["MATCH_KEYCHAIN_NAME"], keychain_password: ENV["MATCH_PASSWORD"])

    match(app_identifier: "io.robbie.HomeAssistant.dev.MapNotificationContentExtension", type: "appstore", readonly: true, keychain_name: ENV["MATCH_KEYCHAIN_NAME"], keychain_password: ENV["MATCH_PASSWORD"])
    match(app_identifier: "io.robbie.HomeAssistant.dev.MapNotificationContentExtension", type: "development", readonly: true, keychain_name: ENV["MATCH_KEYCHAIN_NAME"], keychain_password: ENV["MATCH_PASSWORD"])
  end

  desc "Fetches the push notification certificates and saves them as p12 files in push_certs/, perfect for direct upload to AWS SNS. p12 password is password."
  lane :push_certs do
    pem(output_path: "push_certs/", generate_p12: true, team_id: ENV["HOMEASSISTANT_TEAM_ID"], username: ENV["HOMEASSISTANT_APPLE_ID"], p12_password: "password")
    pem(development: true, output_path: "push_certs/", generate_p12: true, team_id: ENV["HOMEASSISTANT_TEAM_ID"], username: ENV["HOMEASSISTANT_APPLE_ID"], p12_password: "password")

    pem(app_identifier: "io.robbie.HomeAssistant.dev", output_path: "push_certs/", generate_p12: true, team_id: ENV["HOMEASSISTANT_TEAM_ID"], username: ENV["HOMEASSISTANT_APPLE_ID"], p12_password: "password")
    pem(app_identifier: "io.robbie.HomeAssistant.dev", development: true, output_path: "push_certs/", generate_p12: true, team_id: ENV["HOMEASSISTANT_TEAM_ID"], username: ENV["HOMEASSISTANT_APPLE_ID"], p12_password: "password")
  end

  desc "Generate proper icons for all build trains"
  lane :icons do
    appicon(appicon_path: 'HomeAssistant/Resources/Assets.xcassets', appicon_image_file: 'icons/dev.png', appicon_name: 'AppIcon.dev.appiconset', appicon_devices: [:ipad, :iphone])
    appicon(appicon_path: 'HomeAssistant/Resources/Assets.xcassets', appicon_image_file: 'icons/beta.png', appicon_name: 'AppIcon.beta.appiconset', appicon_devices: [:ipad, :iphone])
    appicon(appicon_path: 'HomeAssistant/Resources/Assets.xcassets', appicon_image_file: 'icons/release.png', appicon_devices: [:ipad, :iphone])
  end

  desc "Download latest localization files from Lokalize"
  lane :localize do
    lokalise(destination: 'HomeAssistant/Resources/', use_original: true)
  end

  desc "Upload iTunes Connect metadata to Lokalise"
  lane :update_lokalise do
    lokalise_metadata(action: "update_lokalise", override_translation: true)
  end

  desc "Download iTunes metadata from Lokalise and upload to iTunes Connect"
  lane :update_itunes do
    lokalise_metadata(action: "update_itunes")
  end

  def change_log_since_last_tag
    # http://git-scm.com/docs/pretty-formats
    # - <short hash> <commit title>
    return changelog_from_git_commits(pretty: '- %s (%h)')
  end

  def version_string(version_number, build_number)
    "#{version_number} (#{build_number})"
  end

  def tag_name(build_type, version_number, build_number)
    "#{build_type}/#{version_number}/#{build_number}"
  end

  def complete_version_number
    return version_string(get_version_number, get_build_number)
  end

  desc "Runs all the unit tests"
  desc "Submits a new Beta Build to Fabric"
  desc "Submits a new Beta Build to Apple TestFlight"
  lane :ci do
    create_keychain(
      name: ENV["MATCH_KEYCHAIN_NAME"],
      password: ENV["MATCH_PASSWORD"],
      timeout: 3600,
      default_keychain: true,
    )

    certs

    bump_build

    sh("security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k #{ENV["HOMEASSISTANT_CERTIFICATE_KEY"]} #{ENV["MATCH_KEYCHAIN_NAME"]}")
    if is_ci && ENV['TRAVIS_PULL_REQUEST'] == "false"
      if git_branch == "master"
        itc
      elsif git_branch == "dev"
        fabric
      end
    end
  end

  desc "Bump build number"
  lane :bump_build do
    git_pull(only_tags: true)

    increment_version_number(version_number: get_version_number)
    increment_build_number

    bump
  end

  desc "Bump version number"
  lane :bump_version do
    git_pull(only_tags: true)

    increment_version_number
    increment_build_number(build_number: 1)

    bump
  end

  lane :release do
    cocoapods(repo_update: true)
    fabric_beta
    itunes
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :itc do
    cocoapods(repo_update: true)
    itunes
  end

  desc "Submit a new Beta Build to Fabric"
  desc "This will also make sure the profile is up to date"
  lane :fabric do
    cocoapods(repo_update: true)
    fabric_beta
  end

  private_lane :bump do
    # Needed so that the changelog doesn't include the version bump commit
    change_log = change_log_since_last_tag

    commit_version_bump(
      message: "[ci skip] Version bump to #{complete_version_number}",
      xcodeproj: "HomeAssistant.xcodeproj"
    )

    push_to_git_remote(remote_branch: "master")

    set_github_release(
      repository_name: "home-assistant/home-assistant-iOS",
      api_token: ENV["HOMEASSISTANT_GITHUB_API_TOKEN"],
      name: complete_version_number,
      tag_name: tag_name("testflight", get_version_number, get_build_number),
      description: change_log || "Release commit",
      is_prerelease: false
    )
  end

  desc "Submit a new Beta Build to Fabric"
  desc "This will also make sure the profile is up to date"
  private_lane :fabric_beta do |options|

    clean_build_artifacts
    clear_derived_data

    # certs

    gym

    notification(
      subtitle: "Finished Building",
      message: "Uploading to Fabric",
      activate: "com.googlecode.iterm2",
      app_icon:"https://raw.githubusercontent.com/fastlane/fastlane/master/fastlane/assets/fastlane.png"
    )

    crashlytics(
      api_token: ENV['HOMEASSISTANT_FABRIC_CLIENT_ID'],
      build_secret: ENV['HOMEASSISTANT_FABRIC_SECRET'],
      notes: changelog_from_git_commits(pretty: '- %s'),
      groups: ["Home Assistant"]
    )

    notification(
      subtitle: "Finished",
      message: "Build #{complete_version_number} built and uploaded to Fabric",
      activate: "com.googlecode.iterm2",
      app_icon:"https://raw.githubusercontent.com/fastlane/fastlane/master/fastlane/assets/fastlane.png"
    )

    rocket
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  private_lane :itunes do |options|

    clean_build_artifacts
    clear_derived_data

    # certs

    gym(scheme: "Release")

    pilot(
      changelog: changelog_from_git_commits(pretty: '- %s'),
      skip_submission: true,
      distribute_external: false,
      skip_waiting_for_build_processing: true
    )

    rocket
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful
  end

  error do |lane, exception|
  end
end
